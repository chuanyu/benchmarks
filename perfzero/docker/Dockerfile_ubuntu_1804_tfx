# Ubuntu 18.04 Python3 with CUDA 10 and the following:
#  - Installs tf-nightly-gpu (this is TF 2.0)
#  - Installs requirements.txt for tensorflow/models
#
# NOTE: Branched from Dockerfile_ubuntu_1804_tf_v2 with changes for
# TFX benchmarks.

FROM nvidia/cuda:10.0-base-ubuntu18.04 as base
ARG tensorflow_pip_spec="tf-nightly-gpu"
ARG local_tensorflow_pip_spec=""
ARG extra_pip_specs=""
# If 1, use the GitHub HEAD version for TFX, tf.Transform and tf.ModelAnalysis.
# Otherwise, use the released PyPI packages.
ARG use_github_version=1

# setup.py passes the base path of local .whl file is chosen for the docker image.
# Otherwise passes an empty existing file from the context.
COPY ${local_tensorflow_pip_spec} /${local_tensorflow_pip_spec}

# Pick up some TF dependencies
# cublas-dev and libcudnn7-dev only needed because of libnvinfer-dev which may not
# really be needed.
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        cuda-command-line-tools-10-0 \
        cuda-cublas-10-0 \
        cuda-cublas-dev-10-0 \
        cuda-cufft-10-0 \
        cuda-curand-10-0 \
        cuda-cusolver-10-0 \
        cuda-cusparse-10-0 \
        libcudnn7=7.6.2.24-1+cuda10.0  \
        libcudnn7-dev=7.6.2.24-1+cuda10.0  \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libzmq3-dev \
        libpng-dev \
        pkg-config \
        software-properties-common \
        unzip \
        lsb-core \
        curl

RUN apt-get update && \
    apt-get install -y --no-install-recommends libnvinfer5=5.1.5-1+cuda10.0 \
    libnvinfer-dev=5.1.5-1+cuda10.0 \
    && apt-get clean

# For CUDA profiling, TensorFlow requires CUPTI.
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH

# See http://bugs.python.org/issue19846
ENV LANG C.UTF-8

# Add google-cloud-sdk to the source list
RUN echo "deb http://packages.cloud.google.com/apt cloud-sdk-$(lsb_release -c -s) main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
RUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

# Install extras needed by most models
RUN apt-get update && apt-get install -y --no-install-recommends \
      git \
      ca-certificates \
      wget \
      htop \
      zip \
      google-cloud-sdk

# Install / update Python and Python3
RUN apt-get install -y --no-install-recommends \
      python3 \
      python3-dev \
      python3-pip \
      python3-setuptools \
      python3-venv


# Upgrade pip, need to use pip3 and then pip after this or an error
# is thrown for no main found.
RUN pip3 install --upgrade pip
# setuptools upgraded to fix install requirements from model garden.
RUN pip install wheel
RUN pip install --upgrade setuptools google-api-python-client pyyaml google-cloud google-cloud-bigquery mock
RUN pip install absl-py
RUN if [ ! -z "${extra_pip_specs}" ]; then pip install --upgrade --force-reinstall ${extra_pip_specs}; fi
RUN pip install tfds-nightly
RUN pip install -U scikit-learn

RUN curl https://raw.githubusercontent.com/tensorflow/models/master/official/requirements.txt > /tmp/requirements.txt
RUN pip install -r /tmp/requirements.txt

# Install yolk3k, for getting package versions from PyPI (so we can pull
# TFX from GitHub even when we need to install from the released version)
RUN pip install yolk3k

# Install protoc
RUN PROTOC_ZIP=protoc-3.7.1-linux-x86_64.zip; \
    curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.7.1/$PROTOC_ZIP; \
    unzip -o $PROTOC_ZIP -d /usr/local bin/protoc; \
    unzip -o $PROTOC_ZIP -d /usr/local 'include/*'; \
    rm -f $PROTOC_ZIP;

# Install TFX, tf.Transform and tf.ModelAnalysis.
RUN if [ ${use_github_version} = 1 ]; then \
      # Install from GitHub. Install TFX, tf.Transform and \
      # tf.ModelAnalysis all from the HEAD revision on GitHub. \
      # Note that the order matters - we want to install tf.Transform and \
      # tf.ModelAnalysis after TFX so they override the version associated \
      # with TFX. \
      TFX_HEAD_COMMIT_ID=$(git ls-remote https://github.com/tensorflow/tfx refs/heads/master | cut -f1); \
      echo TFX_HEAD_COMMIT_ID=${TFX_HEAD_COMMIT_ID}; \
      pip install -e git+https://github.com/tensorflow/tfx.git@${TFX_HEAD_COMMIT_ID}#egg=tfx; \
      echo "GIT_COMMIT_ID='${TFX_HEAD_COMMIT_ID}'" >> $(python3 -c 'import tfx; print(tfx.__path__[0])')/__init__.py; \
      \
      TFT_HEAD_COMMIT_ID=$(git ls-remote https://github.com/tensorflow/transform refs/heads/master | cut -f1); \
      echo TFT_HEAD_COMMIT_ID=${TFT_HEAD_COMMIT_ID}; \
      pip install -e git+https://github.com/tensorflow/transform.git@${TFT_HEAD_COMMIT_ID}#egg=tensorflow_transform; \
      echo "GIT_COMMIT_ID='${TFT_HEAD_COMMIT_ID}'" >> $(python3 -c 'import tensorflow_transform; print(tensorflow_transform.__path__[0])')/__init__.py; \
      \
      TFMA_HEAD_COMMIT_ID=$(git ls-remote https://github.com/tensorflow/model-analysis refs/heads/master | cut -f1); \
      echo TFMA_HEAD_COMMIT_ID=${TFMA_HEAD_COMMIT_ID}; \
      pip install -e git+https://github.com/tensorflow/model-analysis.git@${TFMA_HEAD_COMMIT_ID}#egg=tensorflow_model_analysis; \
      echo "GIT_COMMIT_ID='${TFMA_HEAD_COMMIT_ID}'" >> $(python3 -c 'import tensorflow_model_analysis; print(tensorflow_model_analysis.__path__[0])')/__init__.py; \
    else \
      # Install from released versions. \
      # For TFX we want to install from GitHub, so we get the data files as \
      # well (they are not included in the pip package). We use yolk to \
      # find the latest version from PyPI, and then find the corresponding \
      # tag in GitHub. \
      LATEST_TFX_VERSION=$(yolk -V tfx | head -n 1 | cut -d' ' -f 2-); \
      echo LATEST_TFX_VERSION=${LATEST_TFX_VERSION}; \
      pip install -e git+https://github.com/tensorflow/tfx.git@${LATEST_TFX_VERSION}#egg=tfx; \
      pip install tensorflow-transform; \
      pip install tensorflow-model-analysis; \
    fi;

# Uninstall the TensorFlow version that TFX / the TFX components installed, and
# force install the version requested.
RUN pip uninstall -y tensorflow
RUN pip install --upgrade --force-reinstall ${tensorflow_pip_spec}

RUN pip freeze
